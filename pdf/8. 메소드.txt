

@ 메소드 (method)
-> 메소드는 타 언어에서는 함수(function) 이라고 부름
-> 우리가 기존에 작성하던 공간도 하나의 메소드 임
-> 메소드를 사용하게 됨으로써 기능별 구분을 할 수 있게 됨
-> 재사용하는 코드들은 메소드로 정의함으로써 불필요한 중복 코드들을
줄일 수 있음 
-> 메소드명은 해당 기능명을 작성하는게 원칙이고, 낙타표기법을 따름

@ 메소드의 형태

public int test(int a, int b){
	int c;
	c = a+b;
	return c;
}


public  : 접근제어 지시자 (뒤에 배웁니다. 지금은 무조건 public만 쓰세요)
int	: 리턴 데이터 타입
test	: 메소드명
(int a, int b)	: 매개변수 (parameter)
		-> 호출시 보낸값(인자 혹은 인수<argument>) 을 저장하는 변수
{ 코드  } : 해당 메소드를 호출시 작동하는 코드
return c : 호출이 끝나면 돌아갈때 가져갈 값

	※ 메소드는 리턴값이 있을겨우 리턴 데이터 타입이 명확해야함
	※ 리턴값이 없는 경우에는 void


@ 메소드의 정의와 호출
-> 메소드는 사용하기전에 미리 정의를 해놓고 호출하여 사용함

	public void callerFunction() {
		calleeFunction(); // 호출
		calleeFunction(); // 호출
	}
	public void calleeFunction() {   //정의
		System.out.println("안녕하세요"); 
	}



@ 간단 실습 해보기
-> 아래 코드가 있을시 작동할 수 있도록 Cal 클래스를 만들어서
각 각의 메소드를 호출하였을시 결과값이 나올수 있도록 만들어라.
 
		Cal t = new Cal();
		int a = 10;
		int b = 3;
		System.out.println(t.addFunction(a, b));
		System.out.println(t.subFunction(a, b));
		System.out.println(t.mulFunction(a, b));
		System.out.println(t.divFunction(a, b));




정답 코드


실행용 클래스

		Test t = new Test();
		int a = 10;
		int b = 3;
		System.out.println(t.addFunction(a, b));
		System.out.println(t.subFunction(a, b));
		System.out.println(t.mulFunction(a, b));
		System.out.println(t.divFunction(a, b));

기능 제공용 클래스
public class Cal{
	public int addFunction(int a, int b) {
		int c;
		c = a+b;
		return c;
	}
	public int subFunction(int a, int b) {
		int c;
		c = a-b;
		return c;
	}
	public int mulFunction(int a, int b) {
		int c;
		c = a*b;
		return c;
	}
	public double divFunction(int a, int b) {
		double c;
		c = a/(double)b;
		return c;
	}
}





@ 메소드의 구분
-> 메소드는 전달인자(argument)와 반환값(return value)의 유무에 따라 4가지 유형이 있음

	① 전달인자(O), 반환값(O)
	② 전달인자(O), 반환값(X)
	③ 전달인자(X), 반환값(O)
	④ 전달인자(X), 반환값(X)




예제)

① 전달인자(O), 반환값(O) 인 경우

public int test(int a){
	return a*a;
}

② 전달인자(O), 반환값(X) 인 경우
public void test(int a){
	System.out.println(a);
}

③ 전달인자(X), 반환값(O) 인 경우
public void test(){
	Scanner sc = new Scanner(System.in);
	int a = sc.nextInt();
	return a;	
}

④ 전달인자(X), 반환값(X) 인 경우
public void test(){
	System.out.println("수고하셨습니다");
}




@ 메소드의 메모리 처리
-> 메소드 안에서 생성되는 변수들은 해당 메소드에서만 사용이 가능함




@ 메소드의 호출 방식
-> 메소드를 호출할때 인수(혹은 인자)를 전달하는 방식

전달방식에 따른 2가지 방식

값 호출 (Call by Value)
	-> 인수의 값을 호출한 함수에 전달
	-> 원본 값 수정 불가 


참조 호출 (Call by Reference)
	-> 인수의 주소를 호출함 함수에 전달
	-> 원본 값 수정 가능





ex) Call by Value 예제

void testFunction(int  a){
		a = 999;
}

		Test t = new Test();
		int [] arr = new int[] {1,2,3,4,5};
		t.testFunction(arr[0]);
		System.out.println(arr[0]);

-> arr[0] 번째의 값만 넘겨주기 때문에 값이 복사되어 넘어감
-> 이때 testFunction에서 아무리 값을 변경하여도 변경 되지 않음



ex) Call by Reference 예제


void testFunction(int[] arr){
		arr[0] = 999;
}

		Test t = new Test();
		int [] arr = new int[] {1,2,3,4,5};
		t.testFunction(arr);
		System.out.println(arr[0]);


-> arr 배열의 주소값을 넘겨주기 때문에 testFunction에서
-> arr 배열의 접근이 가능하여 원본 변수 값을 변경 가능함





@ 실습문제 1
-> 다음 코드에서 소문자 한글자를 입력받으면 대문자로 변경
-> 대문자 한글자를 입력받으면 소문자로 변경할 수 있도록 메소드르 만들어라.

		Scanner sc = new Scanner(System.in);
		Test1 t1 = new Test1();
		char ch;
		System.out.print("영문자 입력 : ");
		ch = sc.next().charAt(0);
		System.out.println("===== 변 환 =====");
		System.out.print(ch + " --> ");
		ch = t1.charChange(ch);
		System.out.println(ch);


정답 : 
char charChange(char ch){
		return (char) (ch^32);
}



















	
	@ 이벤트 (Event)
	-> 사용자가 마우스로 버튼을 클릭하거나 키보드를 누르는 등 어떠한 데이터가
	도착하면 발생함
	-> 이벤트가 발생하면 이벤트 객체가 자동 생성됨
	-> 이벤트 객체는 이벤트에 대한 여러 가지 정보를 가지고 있음
	-> 발생된 이벤트를 처리하는 객체를 이벤트 리스너(event listener) 라고 부름
	
	
	## 이벤트는 3가지가 필요함 ##
	1. 이벤트의 소스(출발지) - 소스코드 X
	-> 이벤트가 발생한 대상체
	ex) 버튼을 눌렀으면 버튼이 소스
	ex) 윈도우를 드래그 하면 윈도우가 소스 

	
	2. 이벤트의 리스너
	-> 이벤트가 발생하면 그것을 들어줄 수 있는 개체가 필요함
	-> 이벤트 발생 시 감지하는 것을 리스너 라고 함 (청취자 혹은 감지자)
	-> 감지에는 종류가 다양함 (클릭, 키보드 드래그 등등)
	-> 단, 리스너는 들어주는 역할일뿐 일을 처리할 순 없음
		- 이벤트에 따른 처리를 하기 위하여 리스너는 이벤트를 감지하면 핸들러에게 감

			
	3. 이벤트의 핸들러
	-> 이벤트가 발생했을 때 이벤트 종류에 따라서 반응 및 조치를 가지고 있는 것을 핸들러 라고 함
	-> 리스너가 핸들러에게 올 때 "이벤트가 발생했음" 과 동시에 다양한 정보를 같이 가지고 옴 (이벤트 종류 이벤트의 소스 등등..)
	
	@ 이벤트 핸들러 작성 4가지 방법
	1. 독립적인 클래스
	2. 내부 클래스
	3. 내부 메소드
	4. 무명 클래스
	
	
	1. 독립적인 클래스 
	-> 외부에 별도의 클래스를 작성하여 사용하는 방법
	
	package kh.java.com;
	
	import java.awt.event.ActionEvent;
	import java.awt.event.ActionListener;
	
	import javax.swing.JButton;
	import javax.swing.JOptionPane;
	
	public class MyListener implements ActionListener{
		private JButton button  = null;
		private JButton button2 = null;
		public MyListener(JButton button, JButton button2)
		{
			this.button = button;
			this.button2 = button2;
		}
		@Override
		public void actionPerformed(ActionEvent e) {
			JButton sourceButton = (JButton)e.getSource();
			if(sourceButton==button)
			{
			JOptionPane.showMessageDialog(null, "알림창");
			}else if(sourceButton==button2)
			{
				System.out.println("두번째 버튼입니다.");
			}
		}
	}
	
	
	2. 내부 클래스
	-> 독립적인 클래스 방법으로는 버튼을 클릭하면 MyFrame에 있는 맴버필드에 접근하는 것이 어려움
	-> 그래서 일반적으로 내부 클래스를 만들어 사용하기도 함
	-> 내부 클래스는 자신을 포함하는 클래스의 맵버변수들을 자유롭게 사용 할 수 있음
	

	ex)
	
	package kh.java.com;
	
	import java.awt.FlowLayout;
	import java.awt.event.ActionEvent;
	import java.awt.event.ActionListener;
	
	import javax.swing.JButton;
	import javax.swing.JFrame;
	import javax.swing.JOptionPane;
	
	public class EventTest extends JFrame{
		private JButton button = new JButton("눌러보세요");
		private JButton button2 = new JButton("누르지마세요");
		
		class MyListener2 implements ActionListener
		{
			@Override
			public void actionPerformed(ActionEvent e) {
				if(e.getSource()==button)
				{
					JOptionPane.showMessageDialog(null, "첫번째 버튼 클릭되었습니다.");
				}else if(e.getSource()==button2)
				{
					System.out.println("두번째 버튼이 클릭 되었습니다.");
				}
			}
		}
		public void comInit()
		{
			this.add(button);
			this.add(button2);
			button.addActionListener(new MyListener2());
			button2.addActionListener(new MyListener2());
		}
		public EventTest()
		{
			super("Event"); 		
			this.setLayout(new FlowLayout()); //레이아웃 매니저 설정
			this.setSize(450,300); // 프레임 사이즈
			this.setLocationRelativeTo(null); // 중앙에 위치 설정
			this.setDefaultCloseOperation(EXIT_ON_CLOSE); //X버튼 클릭시 종료
			this.comInit(); //사용자 정의 메소드
			this.setVisible(true); // 가시적으로 보여주어라
		}
	}
	
	3. 내부 메소드
	-> 해당 클래스 안에 actionPerformed 메소드를 생성하여 사용하는 방법
	-> 프레임 클래스가 ActionListener 인터페이스를 상속받아 자신이 Frame 이자
	이벤트 리스너가 된다는 의미 
	
	ex)
	
	package kh.java.com;
	
	import java.awt.FlowLayout;
	import java.awt.event.ActionEvent;
	import java.awt.event.ActionListener;
	
	import javax.swing.JButton;
	import javax.swing.JFrame;
	import javax.swing.JOptionPane;
	
	public class EventTest extends JFrame implements ActionListener{
		private JButton button = new JButton("눌러보세요");
		private JButton button2 = new JButton("누르지마세요");
		
			@Override
			public void actionPerformed(ActionEvent e) {
				if(e.getSource()==button)
				{
					JOptionPane.showMessageDialog(null, "첫번째 버튼 클릭되었습니다.");
				}else if(e.getSource()==button2)
				{
					System.out.println("두번째 버튼이 클릭 되었습니다.");
				}
			}
		
		public void comInit()
		{
			this.add(button);
			this.add(button2);
			button.addActionListener(this);
			button2.addActionListener(this);
		}
		public EventTest()
		{
			super("Event"); 		
			this.setLayout(new FlowLayout()); //레이아웃 매니저 설정
			this.setSize(450,300); // 프레임 사이즈
			this.setLocationRelativeTo(null); // 중앙에 위치 설정
			this.setDefaultCloseOperation(EXIT_ON_CLOSE); //X버튼 클릭시 종료
			this.comInit(); //사용자 정의 메소드
			this.setVisible(true); // 가시적으로 보여주어라
		}
	}
	
	4. 무명 클래스
	-> 이벤트 리스너 클래스를 정의할때, 가장 많이 사용되는 방법 중 하나
	-> 무명 클래스는 말 그대로 이름이 없는 클래스를 작성하여 한번만 사용 하는 것
	-> 처음에는 어려워 보일 수 있으나 익숙해지면 코드를 읽기 쉽게 만듦
	
	
	@ 스윙 컴포넌트의 이벤트
	-> 스윙 컴포넌트들이 다양한 이벤트를 발생 시킴
	-> 스윙 컴포넌트가 발생하는 이벤트는 크게 2가지로 볼 수 있음
		- 모든 컴포넌트가 공통적으로 지원하는 이벤트
		- 일부 컴포넌트만 지원하는 이벤트
		
		
	@ 모든 컴포넌트들이 지원하는 이벤트
	-> 이런 종류의 이벤트는 일반적으로 저수준 이벤트(log-level event)
	-> 보통 마우스, 키보드로부터 이러한 이벤트가 발생됨
	-> 이 이벤트들은 상당히 자주 발생하기 때문에 이벤트 처리에 이어서 많은 시간을 소비 하면 안됨
	
	Component		컴포넌트의 크기나 위치가 변경되었을 경우 발생
	Focus			키보드 입력을 받을 수 있는 상태가 되었을 때, 혹은 그 반대의 경우에 발생
	Container		컴포넌트가 컨테이너에 추가되거나 삭제될 때 발생
	Key				사용자가 키를 눌렀을 때 키보드 포커스를 가지고 있는 객체에서 발생
	Mouse			마우스 버튼이 클릭이 되었을 때, 또는 마우삭 객체의 영역으로 들어오거나 나갈 때
	MouseMotion		마우스가 움직였을 때 발생
	MouseWheel		컴포넌트 위에서 마우스 휠을 움직이는 경우 발생
	Window			윈도우에 어떤 변화가 있을 때 발생(열림, 닫힘, 아이콘화 등등)
	
	@ 일부 컴포넌트들이 지원하는 이벤트
	-> 이 이벤트들은 의미적 이벤트(Semantic Event)라고 부름
	-> 가능하면 저수준 이벤트보다는 의미적 이벤트를 처리하는 것이 좋음
	-> 의미적 이벤트를 사용하는것이 코드를 간결하게 만들고 이식성도 좋음
	
	Action			사용자가 어떤 동작을 하는 경우에 발생
	Caret			텍스트 삽입점이 이동하거나 텍스트 선택이 변경되었을 경우 발생
	Change			일반적으로 객체의 상태가 변경되었을 경우 발생
	Document		문서의 상태가 변경되는 경우 발생
	Item			선택 가능한 컴포넌트에서 사용자가 선택을 하였을 때 발생
	ListSelection	리스트나 테이블에서 선택 부분이 변경되었을 경우 발생
	
	@ 액션 이벤트 예제
	-> 버튼을 누르면 숫자가 증가되는 프로그램 만들어 보기
	
	
	@ Key 이벤트
	
	-> Key 이벤트는 사용자가 키보드를 이용하여 입력하는 경우에 발생
	-> key를 누를 때도 발생하지만 Key에서 손을 때는 경우에도 발생함
	-> KeyEvent가 발생하려면 컴포넌트에서 반드시 키보드 포커스를 가지고 있어야함
	-> 키보드 포커스를 얻으려면 requestFocus()라는 메소드를 사용
	-> KeyEvent를 받기 위해서는 KeyListener를 implements 해야함
	
	
	@ KeyListen 인터페이스
	KeyTyped(KeyEvent e) : 사용자가 글자를 입력했을 경우에 호출
	KeyPressed(KeyEvent e) : 사용자가 키를 눌렀을 경우에 호출
	keyReleased(KeyEvent e) : 사용자가 키에서 손을 때었을 경우에 호출
	
	
	@ KeyEvent 클래스
	int getkeyChar() KeyEvent에 들어 있는 글자(유니코드)를 반환
	int getKeyCode() keyEvent에 둘어있는 키코드(Keycode)를 반환
			※ 키보드(Keycode)란?
			- 글자가 아니라 키보드 자판의 각 각의 키를 가리키는 상수 값
			ex) Enter == Event.VK_ENTER
			
			
	boolean inAction() 이벤를 발생시킨 키가 액션 키 이면 true를 반환
		※ 액션키(ActionKey)란?
		- Cut, Copy, Paste, Page Up, Caps Lock등의 Funtion키를 의미
		
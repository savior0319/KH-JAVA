 
 	@ 네트워크(Network)란?
 	
 	-> net + work의 합성어 : net(그물) + work(일)
 	-> 단일로 쓰여진 매체를 통신이라는 매개체를 통하여 서로 연결되어 있는 환경
 	
 	@ 네트워킹의 목적
 	
 	-> 여러 개의 통신기기(컴퓨터, 휴대폰 등)들을 서로 연결하여 데이터를 손쉽게 주고
                받거나 또는 자원(프린터 등)을 공유하기 위함
 	-> 빠른 데이터 교환 목적도 있음
 	-> 자바에서 제공하는 java.net 패키지를 사용하면 애플리케이션끼리
 	       데이터 통신을 할 수 있음
 	
 	@ 네트워크에서 필요한 개념
 	
 	- 서버(Server) : 서비스를 제공하는 컴퓨터
 	- 클라이언트(Client) : 서버스를 사용하는(제공받는) 컴퓨터
 	
 	-> 서비스를 제공(서버)하려면 서버용 프로그램이 있어야 하며
 	      서비스 이용(클라이언트)하려면 클라이언트용 프로그램이 각 각 있어야 함                               

 	      
 	      
 	@ 꼭 알아야 하는 네트워크 관련 용어
 	
 	- 호스트(Host)
 		-> 네트워크가 가능한 하나의 통신 기기
 		-> 2대의 컴퓨터 = 2대의 호스트
 		
	- IP주소 (Internet Protocol Address)
		-> IP 주소는 네트워크 상에서 통신기기(대표적으로 컴퓨터)를 구별하는데 사용되는 고유한 주소
		-> IPv4와 IPv6 있음
		-> IPv4는 4Byte(32bit)로 표현하며, IPv6(128bit) 16Byte 표현
		-> IPv4는 2^32개의 주소를 가짐, IPv6는 약 2^128개의 주소를 가짐
		-> 관련 클래스 : InetAddress
		
	- URL (Uniform Resource Location)
		-> 인터넷에 존재하는 여러 서버들이 제공하는 자원에 접근할 수 있는 주소
		-> 프로토콜://호스트명:포트번호/경로명/파일명?쿼리스트링의 형태로 되어 있음
		-> DNS에 의해 IP주소(호스트 주소) 대신 도메인명을 사용하여 접근할 수 있음
		
		ex) http://200.200.200.5:80
		-> 설명
			http : 프로토콜
			:// : 프로토콜 구분자
			200.200.200.5 : IP주소
			:80 : 포트번호 (서비스 번호)
			
		ex) http://www.naver.com:80
		-> 설명
			http : 프로토콜
			:// : 프로토콜 구분자
			www.naver.com : 호스트 이름 (도메인명)
			:80 : 포트번호 (서비스 번호)
			
	  ※ 관련 클래스 : java.net.URL
	  ※ http는 웹을 표현하는 프로토콜로써 포트번호가 기본적으로 80번임
	  	(즉, 웹을 사용하게 되면(http) 마지막 포트번호는 명시하지 않아도 됨)	
	  	
	 - PORT NUMBER
	 -> 0 ~ 65535 까지의 번호로 이루어져 있으면 Service 번호 라고 부름
	 -> Port 번호는 TCP Port 번호와 UDP Port 번호로 나누어 짐
	 	※ 포트 번호는 각 각 0 ~ 65535 까지 사용 할 수 있음
	 	ex) TCP port : 0 ~ 65535  / UDP Port : 0 ~ 65535
	 	
	 -> Port 번호를 가지고 서비스를 구분하는데 사용함
	 		- HTTP : TCP 80
	 		- FTP : TCP 21, 20
	 		- TFTP : UDP 69
	 
	 ## TCP ##
	 
	 -> 데이터 전달의 신뢰성을 최대한 보장하기 위한 방식
	 -> 연결 지향
	 	- 데이터 전달할 논리적인 연결(세션)을 먼저 구성
	 	- 세션 연결 설정 -> 데이터 전송 -> 세션 연결 해제
	 -> 신뢰성 보장
	 	- 순차적으로 데이터를 전송함
	 	- 확인 응답 및 오류 시 재전송
	 -> 확실한 데이터 전송을 위해 사용 됨
	 -> 확실한 전송, 속도가 느림
	
	 ## UDP ##
	 
	 -> 데이터의 빠른 전달을 보장하기 위해 사용됨
	 -> 빠른 속도 보장을 위해 대부분의 기능을 제한함
	 		- 비 신뢰성 : 확인 응답 및 재전송 작업을 하지 않음	
	 		- 비 연결 지향성 : 논리적인 연결(세션)을 맺지 않음
	 -> 빠른 데이터 전송을 위해 사용 됨 (실시간 스트리밍 서비스..)
	 -> 빠른전송, 손실 발생 가능성
	 
	 
	 @ 소켓 프로그래밍
	 
	 -> 소켓 프로그래밍은 소켓을 이용한 통신 프로그램을 뜻 함
	 -> 소켓(Socket)은 서로 멀리 떨어진 두 사람이 통신을 하기 위해서는 전화기가 필요한 것처럼
		 프로세스간의 통신을 위해서는 별도의 무언가가 필요하고 그 무언가를 소켓이라 부름
	 -> 즉, 정리하면 소켓 프로그래밍은 통신을 할 수 있는 프로그램을 만드는 것을 말함
	 -> 앞서 말했듯이 자바에서는 java.net 패키지를 통해 소켓 프로그래밍을 지원함
	 -> 소켓 프로그래밍은 서버 소켓과 클라이언트 소켓을 생성 해야 함
	 
	 
	 
	 @ TCP 소켓 프로그래밍
	 
	 ## 서버용 소켓 ##
	 1. 서버의 포트 번호를 정함 ex)77
	 2. 서버용 소켓 객체를 생성함
	 	ServerSocket 레퍼런스 = new ServerSocket(포트번호);
	 	ex) ServerSocket ss = new ServerSocket(7777);
	 3. 클라이언트 쪽에서 접속 요청이 오길 기다림
	 4. 접속 요청이 오면 요청을 수락하고 해당 클라이언트에 대한 소켓 객체를 생성함
	 	Socket ClientSocket = serverSocket.accept();
	 	
	 5. 연결된 클라이언트와 입출력 스트림을 생성함
	 InputStream input 스트림 레퍼런스 = 클라이언트 소켓 레퍼런스.getInputStream();
	 OutputStream input 스트림 레퍼런스 = 클라이언트 소켓 레퍼런스.getOutputStream();
	 
	 ex) InputStream in = clientSocket.getInputStream();
	 ex) OutputStream out = clientSocket.getOutputStream();
	 
	 5-1. 보조스트림을 붙여 성능을 개선 해도 됨
	 	ex) DataInputStream dosIn = new DataInputStream(in);
	 	ex) DataOutputStream dosOut = new DataOutStream(out);
	 	
	 	바이트 스트림을 문자 스트림으로 변경하는 법
	 	
	 	## 입력용 스트림 ##
	 	BufferedReader 레퍼런스 = new BufferedReader(Input 스트림 레퍼런스);
	 	
	 	## 출력용 스트림 ##
	 	PrintWriter 레퍼런스 = new PrintWriter(Output 스트림 레퍼런스);
	 	
	 6. 스트림을 통한 읽고 쓰기를 함
	 	ex) dis.readUTF():
	 	ex) dos.writeUTF("안녕");
	 	
	 	읽기용 레퍼런스.read() 또는 읽기용 레퍼런스.readLine() 가능
	 	쓰기용 레퍼런스.println() 가능
	 	
	7. 통신 종료 (스트림 정리)
		입력 스트림 레퍼런스.close();
		출력 스트림 레퍼런스.close();
		소켓 레퍼런스.close();
	 
	 ## 클라이언트용 소켓 ##
	 
	 
	 
	 
	 
@ 가변 배열
 - 2차원 배열 선언 시 마지막 열 크기를 지정하지 않고, 추후에 지정함으로써
       고정된 2차원 배열 크기가 아닌 유동적인 가변 배열을 구성할 수 있음
       
       자료형 [][] = 변수이름 = new 자료형[행길이][];
    	=> 행 마다 열의 길이가 가변적임
    	
   ex) int[][] arr = new int[3][];
   	   arr[0] = new int[3];
   	   arr[1] = new int[2];
   	   arr[2] = new int[5];
   	   
 @ 메소드
 - 메소드는 타 언어에서는 함수(function)라고 부름
 - 우리가 기존에 작성하던 공간(main 및 기타 메소드)도 하나의 메소드임
 - 메소드를 사용하게 됨으로써 기능별 구분을 할 수 있게 됨
 - 재사용하는 코드들을 메소드로 정의함으로써 불필요한 중복 코드들을 줄 일 수 있음
 - 메소드명은 해당 기능명을 작성하는게 원칙이고, 낙타표기법을 따름
 
 @ 메소드의 형태
 	public int sum(int a, int b){
 		int c;
 		c = a+b;
 		return c;
 	}
 	
 	public 반환형 메소드명(매개변수){
 		코	드
 	return 반환;
 	}
 	
  # 메소드를 작성할 때 Tip
  -> 순서대로 만들면 쉽게 제작이 가능 함
  	1. 기본틀을 작성 함
  	2. 메소드명을 수정 함
  	3. 매개변수를 수정 함
  	4. 싱행 코드를 수정 함
  	5. 리턴 데이터 타입을 수정 함
  	
 	Caller : 호출 한 메소드
 	Callee : 호출 당한 메소드
 	
 	public : 접근 제어자 
 	int : 리턴 데이터 타입
 	sum : 메소드 명
 	(int x, int y) -> 매개 변수(Parameter) 인자 인수(Argument)를 저장하는 변수
 	
 	{코드} : 해당 메소드 호출 시 실행하는 코드
 	return c; : 호출이 끝나면 돌아갈 때 가져가는 값
 	
 		* 메소드는 리턴 값이 있을 경우 리턴 데이터 타입이 명확해야 함
 		* 리턴 값이 없는 경우에는 void 형을 사용 함
 		* 매개변수가 없는 경우에는 매개 변수 부분을 비워 놓음 
 		
  @ 메소드의 구분
  - 메소드는 전달인자(Argument)와 반환 값(return value)의 유무에 따라 4가지 유형이 있음
  
  1. 전달인자(o), 반환값(o)
  		public int sum(int num1, int num2){
  			return num1 + num2;
  		}
  
  2. 전달인자(o), 반환값(x)
  		public void printValue(int value){
  			System.out.print(value);
  		}
  
  3. 전달인자(x), 반환값(o)
  		public int value(){
  			Scanner sc = new Scanner(System.in);
  			return sc.nextInt();
  		}
  		
  4. 전달인자(x), 반환값(x)
  		public void printOnly(){
  			System.out.print("수고하셨습니다");
  		}
  
  @ 메소드의 메모리 처리 
  - 메소드 안에서 생성되는 변수들은 메소드에서만 사용이 가능함
  		- 해당 메소드에서만 사용이 가능하기 때문에 이름 중복 문제가 발생하지 않음
  
  @ 메소드의 호출 방식
  - 메소드를 호출할 때 인수(혹은 인자)를 전달하는 방식
  
 	전달방식에 따른 호출(Call by Value)
 		-> 인수의 값을 호출한 메소드에 전달
 	참조에 의한 호출 (Call By Reference)
 		-> 인수의 주소를 호출 메소드에 전달
 		-> 원본 값 수정 가능
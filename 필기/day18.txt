	 
	 @ Calendar class
	  -> 현재 시간과 관련 있는 Class
	  -> Calendar 클래스는 추상클래스로써, 생성자가 Protected 이기 때문에
	  	new를 통해 객체 생성을 하지 못하고, getInstance() 메소드를 통해 객체를 생성 함
	  -> 년, 월, 일 , 시, 분, 초 정보를 필드들을 이용하여 사용할 수 있음
	  	※ Calendar의 필드 Month(월)은 값이 0 부터 시작하므로
	  	1월달은 0으로 나옴 (값으로 출력시에는 +1을 해서 출력 해주어야 함)
	  	
	  -> set 메소드를 통해 설정 값을 변경 할 수 있음
	  -> Calendar.getTimeMillis()메소드를 사용하면 현재 시간을 밀리초 단위로 변경하여 가져옴 (long 형)
	  
	  @ Data Class
	  -> 시스템으로부터 현재 날짜, 시간 정보를 가져와서 다룰 수 있게 만들어진 클래스로 생성자 2개 (디폴트, 매개변수 있는)만 사용 가능하고 나머지는 deprecated임
	  -> Calendar 클래스의 사용을 권장 함
	  -> java.util. 패키지에 포함되어있음
	  
	  @ SimpleDateFormat Class
	  -> Date의 날짜, 시간 정보를 원하는 format으로 출력하도록 기능을 제공하는 클래스
	  -> java.text 패키지에 속해 있음
	  
	  @ Exception 이란?
	  -> 예외 라는 뜻을 가지고 있고, 예외는 얘기치 못한 상황 이라고 볼 수 있음
	  -> 프로그래밍 하다보면 수 많은 오류 상황을 직면 하게 됨
	  -> 자바에서는 예외 (Exception)란 프로그램을 만든 프로그래머가 예상한
		  정상적인 처리에서 벗어나는 경우에 이를 처리하기 위한 방법이라고 볼 수 있음
	  -> 예측 가능한 에러를 처리하는 것을 예외 처리 라고 함
	  
	  @ 예외 처리의 목적
	  -> 프로그램의 비정상적인 종료 막고, 정상적인 실행상태를 유지하기 위함
	  		※ 어떻게? : 예외 상황이 발생된 경우에 처리하는 로직을 만듬
	  		
	  		
	  @ try ~ catch
	  -> 예외를 처리 하기 위한 문법
	  -> 자바에서는 try ~ catch 라는 문법을 통해 예측할 수 있는 부분과
	  	에러가 발생하면 싱행하는  코드롤 나눌 수 가 있음
	  -> try는 예측을 할 수 있는 부분이고, try에서 에러가 발생한다면 즉시 중단하고
	  	catch 부분의 코드를 실행하게 됨
	  	
	  -> try 작성한 후 Ctrl + 스페이스를 눌러서 try ~ catch 구분을 사용해 보자
	  
	  	try {
	  	} catch (Exception e)
	  	{
	  	}
	  	
	  	-> 이 때 Exception e 코드는 무엇일까?
	  	-> e는 객체이고, Exception은 하나의 Class 타입 임
	  	-> e라는 객체는 예외 상황에 대한 에러 내용을 담고 있는 객체라고 보면 됨
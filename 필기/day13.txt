 @ this 키워드
 -> 클래스 생성시 setter, getter 메소드를 만들게 되면 멤버변수와 매개변수의 이름이 동일할 경우 
 	해당 변수는 가장 가까운 변수를 지목하는 상황이 됨
 	
 	ex)
 		private String name;
 		public void setName(String name){
 			this.name = name;
 		}
 		
 -> this 라는 키워드를 사용하여 자기 자신을 지칭하게 됨
 
 @ 클래스 다이어 그램
 -> 우리가 제작된 클래스를 그림으로 표현하는 것
 -> 클래스 다이어 그램에는 멤버변수(필드), 메소드를 표현 함 
 
 @ 생성자와 소멸자
 -> 생성자는 class를 바탕으로 객체가 생성될 때 자동으로 호출되는 메소드
 -> 소멸자는 객체가 소멸할 때 자동으로 호출되는 메소드
 -> 타언어에서는 생성자와 소멸자가 존재하지만 'Java" 라는 언어는 특성상
 	생성자는 있지만 소멸자는 존재하지 않음
 	
 	* 소멸자가 존재하지 않게 된 이유
 	: 타 언어(C++)에서는 사용한 메모리에 대한 정리도 개발자가 직접 해야 했음
 	(new를 사용하면 사용한 객체를 지울때는 delete를 코딩 해야 했음
 	JVM이 직접 관리 하도록 하기 위해여 GC가 존재함
 	GC는 JVM에서 사용하는 메모리 꽉차기 전에 자동으로 특정 알고리즘에 의해서 메모리 정리 역학을 해주고 있음
 	즉, 자바는 개발자에게 메모리 관리까지 생각하여 코딩하지 말고
 	프로그램 개발에만 집중할 수 있도록 만든 개발자 중심의 언어라고 볼 수 있음
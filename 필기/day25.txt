		
		@ JButton
		-> 사용자가 클릭했을때 어떤 작업이 수행되도록 하기 위해 만드는 컴포넌트
		-> 흔히 우리가 자주 보는 버튼이락 생각 하면 됨
		
		
		버튼 생성
		-> private JButton btn1 = new JButton("버튼1");
		
		버튼 추가
		-> this.add(btn1);
		
		버튼 설정
		-> btn1.setSize(100, 500);
		-> btn.setLocation(100, 75);
	
	
		@ JCombox
		-> 여러 Item 중에서 하나를 선택 할 수 있는 컴포넌트
		
		콤보박스 생성
		-> private JComboBox box = null;
		
		콤보박스 추가
		
		-> this.add(box);
		
		콤보박스 설정
		-> String[] food = {"피자", "햅버거"...}
		box = new JComboBox.add(food);
		
		@ JList
		-> 여러 item 중에서 하나를 선택 할 수 있게 해주는 컴포넌트
		-> 콤보 박스와 비슷하지만 콤보박스는 클릭 전에 모든 아이템을 보여주지 않지만 JList는 리스트 자체를 보여주고 시작함
		
		
		리스트 작성 및 리스트 추가
		-> String[] food = {"피자, 치킨"..};
		-> private JList list = new Jlist(food);
		-> this.add(list);
		
		리스트가 많을 때는 스크롤 추가 가능
		
		- private JScrollPane scroll = new JScrollPane(list);
		- this.add(scroll);
		
		@ JLabel
		-> 화면에 텍스트를 표시하는데 사용되는 컴포넌트
		-> 일반적으로 ID, Password를 작성하는 필드 옆에 있는 글자라고 보면 됨
		
		
		@ JTextField
		-> 사용자로부터 데이터를 자유롭게 입력 받을 수 있는 컴포넌트
		-> 한 줄만 입력할 수 있어서 비교적 길지 않은 값 입력에 사용됨 (ID, 검색어 등등)
		
		@ JPasswordField
		-> 사용자로부터 비밀번호 형태로 입력 받을 수 있는  컴포넌트
		-> 입렵시 값이 비밀번호 형태로 나옴
		
		필드 생성 

		private JTextField tId = new JTextField(10);
		private JPasswordField tPwd = new JPasswordField(10);
	
	
		필드 추가
	
			this.add(pwd);
			this.add(tPwd);
	
	
		
		@ JTextArea
		-> 여러 줄의 텍스트를 입력하거나 보여줄 수 있는 편집 가능한 컴포넌트
	
	
		TextArea 생성
		
			private JLabel label = new JLabel("글작성"); //라벨 생성
			private JTextArea comments = new JTextArea("하고싶은 말을 작성",10,34);
		
		TextArea 추가
	
			this.add(label);
			this.add(comments);
	
	
		
		@ JCheckbox 와 JRadioButton
		-> "선택/비선택"을 표현하는데 사용되는 컴포넌트
		
	
	
		## 체크박스 추가 및 설정 ##
		
			private JCheckBox chFood = new JCheckBox("음식",false);
			private JCheckBox chMusic = new JCheckBox("음악",false);
			private JCheckBox chTv = new JCheckBox("TV",false);
			private JCheckBox chSport = new JCheckBox("운동",false);
		
				this.add(chFood);
				this.add(chMusic);
				this.add(chTv);
				this.add(chSport);
				
				
		@ 라디오 버튼 추가 및 설정
		
			private ButtonGroup bg = new ButtonGroup();
			private JRadioButton btnYes = new JRadioButton("네");
			private JRadioButton btnNO = new JRadioButton("아니오");
			
				bg.add(btnYes);
				bg.add(btnNO);
				ct.add(jlb);
				ct.add(btnYes);
				ct.add(btnNO);
				
		@ JPanel
		-> 빈 평면 공간을 가지고 있는 종속적인 컨터이너
		-> JPanel 안에 JPanel을 포함한 다양한 컴포넌트를 배치할 수 있음
		-> 실제 다양한 컴포넌트들을 Frame에 직접 배치하기 보다
			여러개의 Panel을 생성하여 Panel에 각 각의 역할에 맞는 컴포넌트를 추가함
			
			
		## 패널 생성 및 추가 ##
			private JPanel p1 = new JPanel();
			private JPanel p2 = new JPanel();
			private JButton button1 = new JButton("버튼1");
			private JButton button2 = new JButton("버튼2");
		
		
				p1.setSize(465,200);
				p1.setLocation(10, 10);
				p1.setBackground(Color.green);
				p1.add(button1);
				p2.setSize(465,200);
				p2.setLocation(10, 220);
				p2.setBackground(Color.yellow);
				p2.add(button2);
				this.add(p1);
				this.add(p2);
		
		
		※ 패널을 생성하여 각 컴포넌트들을 담을 수 있음
		
		@ JScrollPane
		-> 단 하나의 컴포넌트만 포함할 수 있는 종속적인 컨테이너
		-> 제한된 공간에서 큰 컴포넌트를 화면에 보여줄 때 사용 함
		
		@ JDialog
		-> JFrame과 같은 독립적인 컨테이너, titlebar와 닫기 버튼을 가지고 있음
		-> 주로 화면에 추가적인 메세지창을 보여주거나 사용자로부터 입력을 받을 때 사용
		
		
		@ JFileChooser
		-> 파일을 열거나 저장할 때 사용하는 Dialog
		
		if (e.getActionCommand().equals("파일열기")) {
			JFileChooser jc1 = new JFileChooser();
			int choiceVal1 = jc1.showOpenDialog(this);
			if (choiceVal1 == JFileChooser.APPROVE_OPTION) {
				JOptionPane.showMessageDialog(null, "선택한 파일 -> " + jc1.getSelectedFile().getName());
			}
		} else if (e.getActionCommand().equals("파일저장")) {
			JFileChooser jc2 = new JFileChooser();
			int choiceVal2 = jc2.showSaveDialog(this);
			if (choiceVal2 == JFileChooser.APPROVE_OPTION) {
				JOptionPane.showMessageDialog(null, "선택한 파일 -> " + jc2.getSelectedFile().getName());
			}
		}
		
		
		@ 배치 관리자 (Layout Manager)
		-> 프로그래머가 원하는 GUI 프로그램을 작성하려면 각 컴포넌트의 크기와 위치를 지정할 수 있어야 함
		-> 자바에서는 컴포넌트들의 위치를 사용자가 직접 지정할 수도 있고 배치 관리자에게 맡길 수 있음
		-> 배치 관리자란 자동적으로 컴포넌트들의 위치와 크기를 결정하는 객체
		
		1. BorderLayout	 : 동서남북 중으로 5가지 형태로 컴포넌트르 배치하는 구조
		2. FlowLayout	 : 순서대로 배치하는 구조
		3. GridLayout	 : 격자 구조
		4. GridBagLayout : 동적 격자 구조
		5. CardLayout	 : 페이지 전환 (배치라고 보기에는 조금 애매함)
		
		
		


	
	 @ Wrapper 클래스
	 -> 기본 자료형을 객체화 해주는 클래스
	 -> 기본 자료형의 데이터를 포장하여 표현하기 때문에 Wrapper Class라고 부름
	 -> 객체지향 언어는 이루어져 있는 전반적인 것들이 객체이기 때문에
		 객체로만 처리할 수 있는 코드들이 많음
	 -> 하지만 객체가 아닌 것들이 존재함 (기본 자료형)
	 	- byte, char, short, int, long, float, double, boolean
	 -> 기본 자료형들은 단순히 데이터의 타입을 명시하는 것이기 때문에 객체가 아닌 단순한 자료형으로만 존재 함
	 -> 이러한 문제로 인하여 객체만 처리 가능한 상황에서는 기본 자료형을 쓸 수가 없음
	 	(객체만 처리 가능한 부분은 후에 Generic 파트에서 사용 하게 됨)
	 -> 그렇기 때문에 기본 자료형을 객체화 시키기 위해서 Wrapper 클래스를 사용 하게 됨
 	
 	## 기본 자료형 ##
 	boolean
 	byte
 	char
 	short
 	int
 	long
 	float
 	double
 	
 	## Wrapper Class ##
 	Boolean
 	Byte
 	Character
 	Short
 	Integer
 	Long
 	Float
 	Double
 	
 	## 기본형으로 래퍼 클래스 생성 ##
 	Boolean bool = new Boolean(true);
 	Byte b = new Byte((byte)1);
 	Character c = new Character('a');
 	Short s = new Short((short)2);
 	Integer i = new Integer(30);
 	Long L = new Long(100L);
 	Float f = new Float(0.7f);
 	Double d = new Double(0.75);
 	
 	@ 오토박싱(Auto Boxing)과 오토언박싱(Auto Unboxing)
 	-> 래더 클래스 안에 기본 자료형 데이터를 넣거나 혹은 빼낼 때 에는
 	    박싱과 언박싱 작업을 해주어야 함
 	    
 	 *박싱 : Integer num = new Integer(10);
 	 *언박싱 : int n = num.intValue();
 	 
 	 -> 하지만 실제 사용할 때에는 자동(오토)으로 박싱과 언박싱 처리를 함
 	 
 	 ## 오토 박싱 ##
 	 기본 자료형에서 Wrapper 클래스로 자동 변환되는 것을 오토박싱 이라고 함
 	 
 	 ex) Integer num = new Integer(10); // 박싱
 	 	 Integer num = 10; // 오토 박싱
 	 	 
 	 ## 오토 언박싱 ##
 	 Wrapper 클래스에서 기본 자료형으로 자동 변환되는 것을 오토 언박싱 이라고 함
 	 
 	 ex) int n = num.intValue(); // 언박싱 처리
 	 	 int n = num; // 오토언박싱 처리
 	 	 
 	@ 래퍼 클래스를 이용한 문자열 처리
 	- 레퍼클래스를 이용하면 문자열 -> 기본 자료형, 기본 자료형 -> 문자열로 변경이 가능 함
 	
 	## 문자열 -> 기본 자료형 ##
 	String data = '999';
 	int i = Integer.parseInt(data);
 	
 	## 기본 자료형 -> 문자열 ##
 	int i = 999;
 	String data = Integer.toString(i);
 	// String data = Integer.valuesOf(i).toString();
 	
 	혹은
 	int i = 999;
 	String data = String.valueOf(i);
 	
 	@ API
 	-> Application Programming Interface의 약자
 	-> 프로그래밍을 할 떄 어떠한 특정 기능을 처리할 수 있도록 만들어 놓은
 	클래스나 메소드(함수)의 집합 (라이브러리)
 	-> 윈도우 API, 자바 API, 웹 API 등 다양하게 존재함
 	※ 윈도우 API : 윈도우 운영체제를 프로그래밍 할 수 있도록
 	미리 여러가지 기능을 정의 해놓은 라이브러리
 	
 	※ 자바 API : 자바 언어를 사용하여 기능 구현 할 수 있도록
 	미리 여러가지 기능을 정의 해놓은 라이브러리
 	
 	※ 웹 API : 웹에서 특정 기능들을 구현 할 수 있도록
 	미리 여러가지 기능을 정의 해놓은 API
 	
 	-> 실제 Java라는 언어는 다양한 API를 가지고 있고, 그러한 API 들을 사용하여 프로그래밍 하는 언어라고 볼 수 있음
 	
 	@ String API
 	-> 문자열을 사용하는 API는 다양함
 	-> 그 중 우리는 String. StringBuffer, StringBulilder 만 다루도록 하겠음
 	
 	
 	@ String 클래스 
 	-> 문자열 값을 수정 하지 못하는 immutable(불변)임
 	-> 수정 시 수정된 문자열이 새로 할당되어 새 주소를 넘김
 	-> 문자열을 자주 수정 시 메모리 낭비가 심함
 	
 	@ String Buffer 클래스
 	-> 문자열 값을 수정할 수 있는 mutable(가변) 임
 	-> 문자열을 자주 변경시 String 보다 유용함
 	-> 기존 문자열에 수정되어 적용 됨 (수정, 삭제 등)
 	-> 기본 16문자 크기로 저장된 버퍼를 이용하며, 수정 시 크기가 증가 될 수 있음
 		- 문자열을 넣은 뒤에 16개의 버퍼 공간이 생김 (16 바이트)			
 		(문자열을 16글자까지 추가하여도 공간이 재할당 되지 않음)
 		- 버퍼 공간이 넘치게 되면 (기존길이 + 버퍼길이 + 1) x 2 만큼의 공간이 할당 됨
 	-> 쓰레드 safe 기능을 제공 함 (성능 저하 요인)
 	 	※ 쓰레드 safe 기능은 동시에 한 자원에 접근하지 못하게 잠그는 기능
 	 	
 	 	
 	 ## String Buffer의 주요 메소드 ##
 	 - capacity 메소드 : 실제 할당된 공간의 크기를 알 수 있음
 	 - length 메소드 : 실제 문자열 길이를 알 수 있음
 	 - insert 메소드 : 문자열 특정 위치에 문자열을 추가
 	 - append 메소드 : 문자열 끝에 문자열을 추가
 	 - delete 메소드 : 문자열의 일부분을 삭제
 	 - replace 메소드 : 문자열의 일부분을 다른 문자열로 대치
 	 
 	@ StringBuilder 클래스
 	-> StringBuffer와 같음
 	-> 단, 쓰레드 safe 기능을 제공하지 않음
 	 
 	@ StringTokenizer 클래스
 	-> 문자열을 분석하여 토큰으로 분리 시켜줌
 	-> 파일에 저장된 텍스트를 처리하는 경우에 유용하게 쓰임
 	-> 생성 시 전달 받은 문자열을 구분자로 나누어 각 토큰에 저장함
 	
 	
 	## 주요 메소드 ##
 	countTokens 메소드 : 토큰을 꺼내지 않고 남아있는 토큰의 수를 확인 함
 	hasMoreTokens 메소드 : 남아 있는 토큰이 있는지 확인 (true, false)
 	nextTokten 메소드 : 토큰을 하나씩 꺼내옴
 	
 	@ Math class
 	-> 자바 API에서 제공하는 기본 Class 중 하나
 	-> 수학에서 자주 사용하는 상수들과 메소드들을 구현해 놓은 클래스
 	-> Math 클래스의 모든 메소드는 클래스 메소드(static method) 이므로,
 	      객체를 생성하지 않고도 바로 사용이 가능 함
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
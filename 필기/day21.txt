	 
	 @ Set
	 -> Collection 중 한가지
	 -> Set의 특성상 중복된 요소를 저장하지 않음
	 		- 중복된 데이터 삽입시 false 값 리턴, 중복이 아니면 true값 리턴
	 -> 저장 순서가 유지 되지 않고, 중복 객체도 저장하지 못하게 하는 자료 구조
	 -> 요소를 추가할 때는 add 메소드를 사용
	 -> null도 중복을 허용하지 않기 때문에 1개의 null만 저장이 됨
	 -> 기존 List와는 다르게 index의 접근이 불가능 함
	 -> HashSet, LinkedSet, TreeSet이 있음
	 
	 
	 @ Set의 사용
	 - 추가 : add 메소드
	 - 삭제 : remove 메소드
	 - 추출 : Iterator 메소드
	 
	 -> set은 index로 처리하는 것이 아니기 때문에 데이터 추출시
        iterator 화 시키고 hasnext와 next를 이용하여 추출해야 함
        
     -> hasNext 메소드는 가리키는 공간의 값이 있으면 true 없으면 false 리턴
        
     -> next 메소드는 가리키는 공간의 값을 꺼내는 메소드 Iterator 공간에 저장된 값은 꺼낼 때  마다 짤라내기로 가져옴
     	중요한 점은 Iterator화는 원본 값을 이용하여 만든 복사된 값이므로 next로 데이터를 가져온다고 해서 원본 값이 사라지는 것은 아님
     	
     @ Set에 저장된 데이터를 ArrayList에 옮겨 담아서 처리할 수도 있음
     
     ex) 
     	HashSet<Integer> hs = new HashSet<Integer>();
     	hs.add(300);
     	hs.add(200);
     	hs.add(100);
     	hs.add(500);
     	hs.add(100);
        	※  단, Set 계열은 중복된 데이터를 저장하지 않음
        	
        ArrayList<Integer> al = new ArrayList(hs);
        // Set 계열 데이터들을 ArrayList를 생성하면서 ArrayList에 저장함
        // ArrayList에 저장된 데이터들은 iterator화 시켜서 꺼낼 필요가 없음 get 메소드를 이용하여 추출 가능함
        
     
     @ Iterator
     -> Iterator는 반복자라는 뜻을 가지고 있음
     -> Set이나 map 계열은 index로 데이터에 접근할 수 없기 때문에
    	실제 가지고 있는 데이터를 Iterator화 싴서 데이터를 가리킬수 있는
    	형태로 만들어 주어야 함
     -> Iterator화가 된 데이터는 hasNext와 next 메소드를 사용할 수 있음
     
     hasNext : 다음 가리키는 데이터가 있는지 확인함 (있으면 true, 없으면 false)
     next : 기라키는 데이터를 가져옴 (get과 같은 형태)
     
     
     	※ 주의할점
     	객체의 주소를 저장한 set의 형태를 iterator화 시키게 되면
     	set에 저장된 주소(레퍼런스)만 새롭게 가져와서 만드는 것임
     	-> 실제 객체를 복사하여 가져오는 형태는 아닌 것 (얕은 복사)
     	
     	
     HashSet<Student> hs = new HashSet<Student>();
     hs.add(new Student("홍길동", 20));
     hs.add(new Student("김말똥", 30));

     Iterator it = hs.Iterator();
     Student s = it.next();
     s.name = "테스트";
     
           실제 HashSet에 저장된 데이터를 보면 변셩되는 것을 볼 수 있음
           즉, Iterator로 복사된 것은 레퍼런스(주소 값)일 뿐 깊은 복사형태가 아님.
           
     @ Set 계열의 객체 저장
     -> Set 계열에 객체를 저장할 때에는 중복 문제가 발생함 
     -> 즉, 기존에 Integer 형태인 100, 200, 300이 저장된 set에 중복 값인 100을 저장하게 되면 중복으로 인해 저장되지 않음
     -> 하지만 객체를 만들어서 저장하게 될 경우 중복 객체가 들어온다 하여도 중복으로 인식하지 못하고 저장되는 문제가 발생함
     -> 이유는 사용자가 직접 만든 class의 객체들은 hashcode 와 equals 가 오버라이딩 되어 있지 않기 때문에 발생하는 문제임
     -> 그렇기 때문에 실제 사용할 때에는 사용자가 직접 만든 class에는 hashcode와
     equals를 오버라이딩 해서 정의 해두어야 set에 저장되는 객체 중복 문제가 해결 됨
     
     
     ArrayList
     -> 순서 O, 중복O
          
     Set
     -> 순서 X, 중복 X
     
     @ Map
     -> 키(key)와 값(Value)으로 구성되어 있음, 키와 값은 모두 객체
     	- String도 객체, 정수도 Integer
     	- 즉, 객체 타입만 저장할 수 있다는 의미
     	
     -> 키는 중복 저장을 허용하지 않음 (Set 방식)
     -> 값은 중복 저장이 가능함 (List 방식)
     -> 키가 중복되는 경우에는 기존에 있는 키에 해당하는 값을 덮어 씀
     -> 구현 클래스는 HashMap, HashTable, LinkedHashMap, Properties, TreeMap이 있음
     		- key를 이용하여 Value를 찾음
     -> Map은 데이터 추가 시에 put 메소드를 사용함 (add 메소드가 아님)
     
     ex) "one" : 1, "two" : 2, "three" : 3
     -> Key : Value 형태로 입력 되기 떄문에 "one", "two", "three"가 키(key)가 되고 1, 2, 3이 value가 됨
     
     @ 궁금증 
     
     	현재 삽입된 데이터 : "one" : 1, "two" : 2, "three" : 3
     	1. "one" : 100 을 넣으면
     	-> "one" : 100 ~
     	2. "four" : 2를 넣으면
     	-> "four" : 2 
     	-> value는 중복 문제와는 상관없이 처리 됨
     	-> 즉, key만 중복되지 않으면 문제가 없음
     	
     	
     @ 데이터 삽입
     -> Map은 put 메소드를 이용하여 데이터를 삽입함
     -> put(Key, value);
     
     
     @ 키 확인
     -> 중복되는 key가 발생하는 상황에서 데이터를 삽입하게 되면
      	기존 value가 사라질 수 있으므로 데이터 삽입시 키를 확인하는것을 권장 함
     -> containskey 메소드를 통해 key 값의 존재를 확인 할 ㅅ ㅜ있음
     	※ 있으면 true, 없으면 false
     	
     	
     @ 데이터 추출
     -> Map은 키(key)를 이용하여 값(value)을 추출함
     -> Value값을 꺼낼 때에는 get 메소드를 사용함
     		- 해당 키가 없을 때에 는 null을 리턴
     		
     		
     @ 데이터 삭제
     -> remove 메소드를 통해 삭제함
     - 인자값은 key
      ex) hm.remove("one");
     
     
     
     @ 모든 키를 set 객체에 담아서 리턴
     -> Set<K> keySet();
     -> 모든 키를 하나하나 작성하여 처리 하지 않고, 저장된 모든 key 값을 가져와서 처리 할때 유용하게 사용 됨
     
     
     @ Properties 
     -> 키와 값을 String 타입으로 제한한 Map 형태의 컬렉션
     -> 주로 Properties는 프로퍼티(*.properties)파일을 읽어 들일 때 주로 사용 됨
     
     
     @ 프로퍼티(*.properties) 파일이란?
     -> 옵션 정보, 데이터 베이스 연결 정보, 국제화(다국어) 정보를 기록한
     	파일로써 여러 정보를 담고 있는 용도로 사용 됨
     -> 애플리케이션에서 주로 변경이 잦은 문자열을 저장하여 관리하기 때문에
    	 유지 보수를 편하게 만들어 줌
     -> 키와 값이 '=' 기호로 연결 되어 있는 텍스트 파일임
     -> Properties 파일의 확장자는 .properties를 사용 함
     
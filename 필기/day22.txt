 
  @ IO
  -> Input(입력)과 Output(출력)을 의미함
  -> 자바에서는 입력(Input)과 출력(Output)처리를 할 수 있어야 함
  	- java.io.패키지안에 입출력 관련 클래스가 있음
  -> 입출력에는 가상의 통로(Stream)가 사용됨
  
  
  @ 컴퓨터에서의 입출력 처리 방식
  ## 입력 절차 ##
  1. 입력
  -> 외부자원(Resource)
  -> 키보드
  -> 디스크상의 파일
  -> 네트워크상의 다른 PC
  -> 데이터베이스 서버
  
  2. 입력용 버퍼 
  -> 읽기용 통로(InputStream)
  
  3. 메모리
  -> 변수에 기록
  
  ## 출력 절차 ##
  1. 메모리 
  -> 변수 값을 읽음
  
  2. 출력용 버퍼
  -> 쓰기용 통로(OutputStream)
  -> 내보냄
  
  3. 출력
  -> 외부자원(Resource)
  -> 모니터
  -> 디스크의 파일 (저장)
  -> 네트워크 상의 다른 PC
  -> 데이터베이스 서버
  
	※ 읽기용 통로를 InputStream 이라고 함
	※ 쓰기용 통로를 OutputSteam 이라고 함
	※ 주의할 점 : Stream(통로)는 시스템(OS)로 부터 얻어오기 때문에 특정 리소스를
				사용하게 됨! 사용 후 에는 꼭 반납하여야 함
				(사용한 스트림 반납은 close 메소드를 사용 함)
				
	-> 스트림은 단방향임 (일방통행)
		- 입력용 스트림
		- 출력용 스트림
		※  만약 입출력을 동시에 하려면 2개의 스트림을 만들어야 함 (입력, 출력, 스트림)
	-> 자바에서 입/출력을 하려면, 외부자원과 스트림을 이용하여 연결 시키고 난 후
		그 다음에 읽거나 쓰기를 함
		- 스트림 클래스에 대한 객체 생성
			: 외부 자원과의 통로 만들기
		- 레퍼런스.읽기용메소드() 또는 레퍼런스.쓰기용메소드() 호출
	-> 자바에서 파일스트림의 종류는 2가지로 구분됨
		- 바이트(Byte) 스트림 : 통로로 움직이는 데이터의 크기가 1Byte 단위임
			- 사운드, 이미지, 동영상과 같은 바이너리 파일들
			- 기록된 정보를 파일 내용으로 볼 수는 없음
		- 문자(Character) 스트림 : 통로로 움직이는 데이터의 크기가 2Byte 단위임
			- 문자 1개씩 움직임
			- 문서 저장 or 불러오기 용도로 사용되며, 문서 파일의 기록된 정보를
			     볼 수 있음
			     
			     
			     
	-> 바이트 스트림 클래스의 최상위 클래스  : InputStream / OutputStream 클래스
	-> 문자 스트림 클래스의 최상위 클래스 : Reader / Writer 클래스
	-> 각 각 read() 메소드를 사용하여 읽어와서 변수에 기록 함
	   Write() 메소드를 사용하여 변수 값을 꺼내서 내보냄
	   
	   
	 @ 스트림의 분류
	 - 용도에 의한 분류
	 a. 1차 스트림(주 스트림) : 디바이스에 직접 연결되는 슨트림
	 b. 2차 스트림(보조 스트림) : 1차 스트림과 연결을 통해 디바이스에 연결되는 스트림
	 
	 ※ 보조 스트림은 독단적으로 사용될 수 없음, 1차 스트림(주 스트림)을 통해서만
	     연결이 가능함
	     
	※ 보조 스트림의 역할은 주 스트림을 보다 편하게 사용하기 위함
	
	- 전송 방향에 의한 분류
	a. 입력 스트림 : 디바이스로부터 데이터를 읽어오는 스트림
	b. 출력 스트림 : 디바이스로 데이터를 출력하는 스트림
	
	- 전송 단위에 의한 분류
	a. 바이트 스트림 : 1Byte 단위로 입/출력 하는 스트림
	b. 문자 스트림 : 문자(2Byte) 단위로 입/출력하는 스트림
	
	- 보조 스트림
	-> 주 스트림의 기능을 향상 시키거나 새로운 기능을 추가 시킴
	
	
	@ 바이트 스트림
	-> 바이트 단위로 데이터를 전송
	-> 바이트 단위로 구성된 파일(동영상, 이미지 , 음악 등)을 처리하기에 적합한 스트림
	-> 바이트 스트림의 최상위 클래스는 InputStream과 OutputStream
	-> 바이트 기반 주 스트림과 보조 스트림이 있음
	
	@ 문자 스트림
	-> 문자 단위로 데이터 전송
	-> 영어 이외의 문자에 대한 처리와 인터딩을 내부에서 처리함
	-> 문자 스트림의 최상위 클래스는 Reader와 Writer임
	
	ex)
	
	public class StreamTest {

	//private final String LS = System.getProperty("line.separator");
	private Scanner sc = new Scanner(System.in);
	// private DataOutputStream dos = null;
	// private FileWriter fw = null;
	private BufferedWriter bw = null;

	public StreamTest() {
		System.out.print("저장할 파일명 >> ");
		String filname = sc.next();
		sc.nextLine();
		String str = new String();
		try {
			//dos = new DataOutputStream(new FileOutputStream("C:\\Users\\user1\\Desktop\\" + filname + ".txt"));
			bw = (new BufferedWriter(new FileWriter("C:\\Users\\user1\\Desktop\\" + filname + ".txt")));
			System.out.println("'" + filname + "' 파일에 저장될 내용 입력 >> ");
			int lineNumber = 1;
			while (true) {
				System.out.print((lineNumber++) + ": ");
				str = (lineNumber - 1) + " : " + sc.nextLine();
				if (str.equals((lineNumber - 1) + " : " + "exit")) {
					System.out.println("※ 종료!");
					break;
				}
				bw.write(str);
				bw.newLine();
			}
		} catch (FileNotFoundException e) {
		} catch (IOException e) {
		} finally {
		try { bw.close(); } catch (IOException e) { }
		}
	}
}
	
	@ 파일 내용을 읽어 올 때에는 InputStream 혹은 Reader를 사용함
	
	ex) 
	package com.kh.java22;

	import java.io.*;

	public class FileReaderTest {

	private BufferedReader br;

	public FileReaderTest() {
		try {
			br = new BufferedReader(new FileReader("C:\\Users\\user1\\Desktop\\1.txt"));
		} catch (FileNotFoundException e) {
		}
		String line = null;
		while (true) {
			try {
				line = br.readLine();
			} catch (IOException e) {
			}
			if (line == null)
				break;
			else
				System.out.println(line);
		}
	}
}

	@ File Class
	-> File Class는 파일과 디렉토리를 다루는데 사용되는 클래스
	-> 여러 메소드를 통해 해당 파일의 정보들을 받아 올 수 있음
	
	## 자주 사용하는 메소드 ##
	파일명 -> getName();
	파일 상대경로 -> getPath();
	파일 절대경로 -> getAbsolutePath();
	파일의 크기 -> length();
	
	상대경로 : 현재 위치를 기점으로 표현
	절대경로 : 최상위를 기점으로 표현
	
	@ 직렬화
	-> 객체를 스트림을 통해 전송을 하기 위해서는 직렳화 작업을 해주어야 함
		- 객체는 큰 덩어리 형태이기 때문에 바이트 단위로 잘라주어야 함
	-> 직렬화의 반대 과정은 역직렬화 라고 함
		- 잘라진 바이트들을 다시 객체화 시키는 것
	-> 객체는 일반 변수들과는 다르게 객체화 되어 있기 때문에 스트림으로 전송하기 위해서는
	   직렬화를 필수적으로 해주어야 함
	-> 정확하게는 객체 안에 만들어져 있는 필드들의 변수값들을 일렬로 나열하여 전송할 수 있게 해주는 형태
	
	
	@ 직렬화를 하기 위한 조건
	1. 해당 Class가 java.io.Serializable을 implements 되어 있어야 함
	-> Serializable interface를 implements 하지 않은 class는 직렬화가 불가능하고
	직렬화를 진행하지 않는 객체는 스트림으로 전송이 불가능함
	
	2. Serializable이 구현되지 않은 클래스의 인스턴스는 직렬화에서 제외됨
	
	@ serialVersionUID
	-> seriVersionUID는 직렬화 시에 사용되는 객체의 고유 번호
	-> Serializable 인터페이스를 implements 하면 serialVersionUID가 선언되지 않았다는 경고(Warning)이 발생함
	-> 실제로 선언하지 않아도 자동으로 JVM이 임의의 번호를 붙여 생성하기 때문에
		경고가 발생하는 것(자동으로 만들어 지지 않았다면 에러가 발생 함)
	-> 하지만 serialVersionUID는 직접 선언하는 것을 권장 함
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

 
 
 	@ 프로세스와 스레드
 	-> 프로세스란?
 	- 흔히 우리가 프로그래밍 하여 만든것을 프로그램이라고 함
 	- 프로세스는 "실행 중인 프로그램"을 뜻 함
 	- OS로부터 실제 메모리를 할당 받아 실행 중인 상태
 	- 프로세스는 플그램을 수해하는데 필요한 데이터와 메모리 그리고 스레드로 구성되어 있음
 	- 모든 프로세스에는 최소한 하나 이상의 스레드가 존재하며, 둘 이상의 스레드를 가진  프로세스를 멀티 스레드 프로세스라고 함
 	
 	-> 스레드란?
 	- 프로세스가 일을 처리하는 최소 작업 단위
 	- 기본적으로 CPU는 실행 요청 순서에 따라 프로세스의 실행 순서를 결정함
 		(작업 스케줄링이라고 하면 FIFO구조로 되어 있음)
 		※ FIFO : First Input First Out (먼저 들어온것이 먼저 나감)
 		※ 먼저 요청한 것을 먼저 처리 함
 	- 싱글 스레드로 된 프로세스는 한번에 한 작업만 가능함 (동시 작업 불가능)
 	ex) 채팅 프로그램에서 채팅 입력과 받은 데이터 출력은 동시에 될 수가 없음
 		하나의 스레드 밖에 없기 때문에 순차적으로 작업을 해야함
 	
 	- 멀티 스레드로 된 프로세스는 한번에 여러 작업이 가능함
 	ex) 채팅 프로그램에서 채팅 입력과 받은 데이터의 출력을 별개의 작업으로 처리
 		할 수 있기 때문에 데이터를 받아서 처리하면서 동시에 입력도 가능함
 	
 	-> 멀티 스레드의 장점
 		- CPU 사용률을 향상 시킴
 		- 자원을 보다 효율적으로 사용 할 수 있음
 		- 사용자에 대흔 응답성이 향상됨
 		- 작업이 분리되어 코드가 간결해짐
 		
 	-> 멀티 스레드의 단점
 		- 동기화 및 교착상태에 대한 문제를 해결 해야함
 		 * 동기화(Syncronization)
 		 -> 독립적인 2개 이상의 개체를 연결해주는 작업
 		 
 		 * 교착상태 (deadlock)
 		 -> 두 스레드가 자원을 점유한 상태에서 서로 상대편이 점유한 자원을
 			 사용하기 위해 진행이 멈춰 있는 상태
 			 
 			 
 	@ 멀티 스레드 작성하기
 	
 	1. 멀티스레드로 작동 시킬 클래스는 반드시 java.lang.Thread 클래스를 상속 받아야 함
 	
 	ex) 
 	class 클래스명 extends Thread
 	{
 	}
 	
 	-> 만약 다른 클래스를 상속 받은 경우라면 Runnable 인터페이스를 상속 받으면 됨
 	class 클래스 명 implements Runnable
 	{
 	}
 	
 	※ 자바에서는 extends는 1개만 사용할 수 있으므로 interface 상속을 꼭 알아야 함
 	
 	2. 상속 처리 후 run() 매소드를 오버라이딩 해서 작동 시킬 코드를 작성함
 	-> Thread를 상속 받은 클래스를 run 클래스에 코드를 작성해야 Thread 처리가 됨
 	
 	@ 멀티스레딩 프로그램 실행 방법
 	1. Thread or Runnable을 상속 받아 만들어진 클래스들에 대한 객체를 생성
 		=> 동시 실행을 원하는 클래스 모두 객체를 생성함
 		
 		ex) ThreadClass1 t1 = new ThreadClass1();
 			ThreadClass2 t2 = new ThreadClass2();
 			
 	2. Thread를 상속 받은 클래스는 Thread 클래스에 대한 객체를 생서하여 담을 수 있음
 	
 		Thread a = t1;
 		Thread b = t2;
 		
 		=> 다형성으로 가능함
 		
 		만약, Runnable 인터페이스를 상속 받은 클래스는 아래와 같은 코드로 할 수 있음
 		Thread a = new Thread(t1);
 		Thread b = new Thread(t2);
 		
 	3. 생성된 스레드 객체를 실행 시킴
 		=> start() 메소드를 사용하여 실행시킴
 		a.start();
 		b.start();
 		=> start() 메소드는 Thread 클래스 안에 내부저으로 만들어져 있으며 start메소드가 run 메소드를 호출하여 작동 시킴
 		
 		
 	@ 스레드 스케쥴링
 		=> 여러 개의 스레드가 동시에 실행을 요청할 때, CPU가 실행의 순서를 정함
 			(기본값 : 5 / 1~10) '1'이 낮고 '10'이 우선순위가 높음
 		=> 스레드 실행에 대한 우선순위를 정할 수 있음
 		=> 우선순위 값 : Thread.MAX_PRIORITY // 최대값 (10)
 					Thread.NORM_PRIORITY // 기본값(5)
 					Thread.MIN_PRIORITY // 최소값(1)
 		=> 우선순위 확인
 			int 변수 = 스레드 레퍼런스.getPriority();
 		=> 우선순위 설정
 			Thread t = new 스레드상속클레스생성자();
 			t.setPriority(7); 1 ~ 10까지 정수
 			
 
 	@ 동기화 (synchronization)
 	-> 싱글스레드 프로세스의 경우 프로세스 내에서 단 하나의 스레드만 작업하기 때문에
 	프로세스의 자원을 가지고 작업하는데 별 문제가 없지만, 멀티 스레드 환경에서는 여러 
 	스레드가 같은 자원을 공유해서 작업하기 때문에 서로의 작업에 영향을 주게 됨
 	
 	-> 여러 스레드가 하나의 데이터 혹은 영역을 공유하게 될 경우
 	스레드 간섭과 메모리 일관성 오류가 발생함
 	-> 스레드 간섭 : 하나의 스레드가 값을 변경하려 할 때 다른 스레드가 끼어드는 경우
 	-> 메모리 일관성 오류 : 공유된 데이터 값이 일치 하지 않는 경우
 	-> 해결 방법 : 동기화 처리
 		- 스레드들이 공유하는 데이터를 한 스레드가 사용하는 동안
 		다른 스레드는 접근하지 못하게 블로킹 처리 하는 방법
 		
 		- 공유하는 데이터를 사용하는 메소드의 반환자료형 앞에
 		synchronized 키워드를 추가함
 		- 또는 소스상의 공유영역을 synchronized(공유 데이터 필드){} 으로 묶음


	@ GUI
	-> Graphic User Interface (그래픽 유저 인터페이스)의 약자
	-> 그래픽적인 window 창을 통해서 명령어들을 실행 시키는 구조
		* TUI(Text User Interface) 처럼 글자로 작성하는 것이 아닌 마우스로
		클릭하여 명령들을 실행할 수 있는 구조
	
	-> 자바에서 사용할 수 있는 GUI 객체는 일반적으로 2가지가 있음
		(AWT, Swing)
	
	
	@ AWT (Abstract Windows Toolkit)
	-> 운영체제가 제공하는 자원을 이용하여 컴포넌트를 생성함
	-> 예를 들어서 버튼의 경우 AWT가 윈도우 시스템에서 실행되고 있다면 윈도우 시스템이
	제공하는 버튼을 이용하여 AWT 버튼을 만듦
	-> AWT의 장점은 여러 플랫폼에서 쉽게 컴포넌트를 제공할 수 있다는 점
	-> 하지만 컴포넌트가 종속적이기 때문에 실행되는 플랫폼에 따라서 컴포넌트들의 모습이
	달라질 수 있음 (일관된 화면 제공이 어려움)
	
	
	@ Swing(스윙)
	-> AWT와는 달리 컴포넌트가 자바로 작성되어 있기 때문에 어떠한 플랫폼에서도
	일관된 모습을 보여 줄 수 있음
	-> AWT는 자바의 초기 버전에 제공되던 것으로 현재는 스윙의 사용이 권장 됨
	-> 또한 AWT에는 없는 다양한 컴포넌트들도 제공됨
	
	
	※ 스윙은 AWT를 대체하기 위하여 AWT의 컴포넌트 이름 앞에 J를 붙인 동일한 기능을
	하는 컴포넌트들을 대체용으로 제공함
	예를 들어서 AWT의 Button 클래스는 Swing의 JButton 클래스로 사용 됨
	
	@ GUI 개발을 위해 꼭 알아야 하는 용어
	
	컴포넌트 : 컨테이너에 포함되어야 화면에 출력 될 수 있는 GUI 객체
		java.awt.Component클래스는 모든 GUI 컴포넌트의 최상위 클래스
	
	컨테이너 : 다른 컴포넌트들을 포함할 수 있는 GUI 컴포넌트
		다른 컨테이너에 포함될 수 있고, 다른 컨테이너에 속하지 않고 독립적으로도
		존재 가능함
		스스로 화면에 자기 자신을 출력하는 컨테이너로는 
		JFrame, JDialog, JApplet 이 있음
	
	
	@ Swing을 이용한 프레임 생성
	-> 프레임이란? 모든 컴포넌트들을 담는 최상위 컨테이너 (Top Level Container)
	-> 프레임이 있어야 GUI 화면 출력이 가능하며, 프레임 내에 부착된 모든 컴포넌트들이 화면에
	출력 됨
	-> 따라서 컴포넌트들은 프레임 없이 독립적으로 화면에 출력될 수 없으며, 프레임이 닫히면
	프레임 내의 모든 컴포넌트들도 사라지고 프레임과 함께 화면에서 없어짐
		※ Swing 에서는 JFrame을 통해 프레임을 만듦
	
	
	@ GUI 프로그래밍 작업 순서
	1. 컨테이너 객체 생성
	2. 배치 방식을 컨테이너에 셋팅함 (레이아웃 생성)
	3. 컴포넌트 객체 생성
	4. 지정된 배치 방식에 따라 컨테이너에 컴포넌트들을 배치함
	5. 컴포넌트에 마우스나 키보드 반응에 대한 이벤트를 처리함
	
	
	@ 프레임 생성하기
	-> 프레임을 생성하는 방법은 3가지로 만들 수 있음
	1. JFrame 객체 생성후 설정
	2. Class에 JFrame을 상속한후 해당 클래스 생성후 설정
	3. Class에 JFrame을 상속하고, 생성자를 이용하여 설정

	
	1. JFrame 객체 생성후 설정
	
	JFrame f = new JFrame();				// 프레임 생성
	f.setSize(500,500);					// 프레임 사이즈 설정(가로,세로)
	f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);	// Close버튼 클릭시 정상 종료
	f.setVisible(true);					// 만든 프레임을 보여주어라
	
	
	2. Class에 JFrame을 상속한후 해당 클래스 생성후 설정
	-> 별도의 클래스를 생성하여 JFrame을 상속 받고 JFrame 처럼 사용하는 방식
	
	public class GuiTest extends JFrame{
		public GuiTest(){	}
	}
	
	public class TestMain {
	
		public static void main(String[] args) {
			GuiTest t = new GuiTest();
			t.setSize(300,200);;
			t.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			t.setVisible(true);
		}
	
	}
	
	
	3. Class에 JFrame을 상속하고, 생성자를 이용하여 설정
	
	
	public class GuiTest extends JFrame{
		public GuiTest(){	}
		public GuiTest(int width,int height,int operation, boolean b) 
		{
			this.setSize(width,height);
			this.setDefaultCloseOperation(operation);
			this.setVisible(b);
		}
	}
	
	public class TestMain {
	
		public static void main(String[] args) {
			GuiTest t = new GuiTest(500,500,JFrame.EXIT_ON_CLOSE,true);
		
		}
	
	}
	
	@ 윈도우 프레임에 대한 세부 속성을 지정
	
	 setLocation(x, y) // 위치 설정
	 setSize(width, height) // 사이즈 설정
	 setBounds(x, y, width, height) // 위치 + 사이즈를 한번에 설정
	 setTitle(String title) // 타이틀 이름 설정
	 setIconImage(IconImage) // 아이콘 이미지 설정
	 setDefaultCloseOperation(Jframe.EXIT_ON_CLOSE) // 우측 상단 X 버튼 클릭 시 종료
	 setVisible(true) // 프레임이 보이도록 함 (가시화)
	 setResizable(true) // 사용자가 사이즈 조절 가능 불가능
	 setLocationRelativeTo(null) // 프레임 위치를 중앙으로 설정
	
	@ 윈도우의 컴포넌트 배치 방식을 지정
		Layout 클래스에 대한 객체 생성후 setLayout(레이아웃레퍼런스);
		※지금은 ...... 건..들지..마..세요..
		
		@ 배치할 컴포넌트 객체를 생성하고, 컴포넌트 객체에 대한 세부 속성 변경
		
		다양한 컴포넌트를 사용하여 만듦
		
		-> JButton
		-> JLabel
		-> JTextField
		-> ImageIcon
		-> JTextArea
		-> JCheckBox
		-> JList
		등등...
		
		@ 컴포넌트들을 해당 원도우(컨테이너)에 배치
		-> add(컴포넌트 레퍼런스)
		
		@ 각 컴포넌트에 이벤트 적용
		-> java.awt.event 패키지에 있는 클래스와 인터페이스를 사용함
	
	
		@ 컴포넌트
		-> 하나의 독립적인 기능을 수행하는 모듈
		-> GUI에서 작동하는 하나의 부품적인 역할을 하는 것
		-> 계산기로 간단히 보면 +버튼, -버튼, 숫자 버튼 등 다양한 컴포넌트들이 존재함
			※ 주의할 점은 컴포넌트 종류 중 버튼이 있는 것일뿐 컴포넌트 == 버튼은 아님
			
		@ 컴포넌트 추가 하기
		-> 컨테이너가 생성되었다면 원하는 컴포넌트 객체들을 컨테이너에 추가할 수 있음
		-> 이 경우에는 JFrame 객체가 컨테이너가 됨
		-> add() 메소드를 이용하여 컴포넌트를 컨테이너에 추가 할 수 있음
	
		@ JButton
		-> 사용자가 클릭했을때 어떤 작업이 수행되도록 하기 위해 만드는 컴포넌트
		-> 흔히 우리가 자주 보는 버튼이락 생각 하면 됨
	
	
	





























 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
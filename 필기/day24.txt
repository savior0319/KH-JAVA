 
 
 	@ 프로세스와 스레드
 	-> 프로세스란?
 	- 흔히 우리가 프로그래밍 하여 만든것을 프로그램이라고 함
 	- 프로세스는 "실행 중인 프로그램"을 뜻 함
 	- OS로부터 실제 메모리를 할당 받아 실행 중인 상태
 	- 프로세스는 플그램을 수해하는데 필요한 데이터와 메모리 그리고 스레드로 구성되어 있음
 	- 모든 프로세스에는 최소한 하나 이상의 스레드가 존재하며, 둘 이상의 스레드를 가진  프로세스를 멀티 스레드 프로세스라고 함
 	
 	-> 스레드란?
 	- 프로세스가 일을 처리하는 최소 작업 단위
 	- 기본적으로 CPU는 실행 요청 순서에 따라 프로세스의 실행 순서를 결정함
 		(작업 스케줄링이라고 하면 FIFO구조로 되어 있음)
 		※ FIFO : First Input First Out (먼저 들어온것이 먼저 나감)
 		※ 먼저 요청한 것을 먼저 처리 함
 	- 싱글 스레드로 된 프로세스는 한번에 한 작업만 가능함 (동시 작업 불가능)
 	ex) 채팅 프로그램에서 채팅 입력과 받은 데이터 출력은 동시에 될 수가 없음
 		하나의 스레드 밖에 없기 때문에 순차적으로 작업을 해야함
 	
 	- 멀티 스레드로 된 프로세스는 한번에 여러 작업이 가능함
 	ex) 채팅 프로그램에서 채팅 입력과 받은 데이터의 출력을 별개의 작업으로 처리
 		할 수 있기 때문에 데이터를 받아서 처리하면서 동시에 입력도 가능함
 	
 	-> 멀티 스레드의 장점
 		- CPU 사용률을 향상 시킴
 		- 자원을 보다 효율적으로 사용 할 수 있음
 		- 사용자에 대흔 응답성이 향상됨
 		- 작업이 분리되어 코드가 간결해짐
 		
 	-> 멀티 스레드의 단점
 		- 동기화 및 교착상태에 대한 문제를 해결 해야함
 		 * 동기화(Syncronization)
 		 -> 독립적인 2개 이상의 개체를 연결해주는 작업
 		 
 		 * 교착상태 (deadlock)
 		 -> 두 스레드가 자원을 점유한 상태에서 서로 상대편이 점유한 자원을
 			 사용하기 위해 진행이 멈춰 있는 상태
 			 
 			 
 	@ 멀티 스레드 작성하기
 	
 	1. 멀티스레드로 작동 시킬 클래스는 반드시 java.lang.Thread 클래스를 상속 받아야 함
 	
 	ex) 
 	class 클래스명 extends Thread
 	{
 	}
 	
 	-> 만약 다른 클래스를 상속 받은 경우라면 Runnable 인터페이스를 상속 받으면 됨
 	class 클래스 명 implements Runnable
 	{
 	}
 	
 	※ 자바에서는 extends는 1개만 사용할 수 있으므로 interface 상속을 꼭 알아야 함
 	
 	2. 상속 처리 후 run() 매소드를 오버라이딩 해서 작동 시킬 코드를 작성함
 	-> Thread를 상속 받은 클래스를 run 클래스에 코드를 작성해야 Thread 처리가 됨
 	
 	@ 멀티스레딩 프로그램 실행 방법
 	1. Thread or Runnable을 상속 받아 만들어진 클래스들에 대한 객체를 생성
 		=> 동시 실행을 원하는 클래스 모두 객체를 생성함
 		
 		ex) ThreadClass1 t1 = new ThreadClass1();
 			ThreadClass2 t2 = new ThreadClass2();
 			
 	2. Thread를 상속 받은 클래스는 Thread 클래스에 대한 객체를 생서하여 담을 수 있음
 	
 		Thread a = t1;
 		Thread b = t2;
 		
 		=> 다형성으로 가능함
 		
 		만약, Runnable 인터페이스를 상속 받은 클래스는 아래와 같은 코드로 할 수 있음
 		
 		Thread a = new Thread(t1);
 		Thread b = new Thread(t2);
 		
 	3. 생성된 스레드 객체를 실행 시킴
 		=> start() 메소드를 사용하여 실행시킴
 		
 		a.start();
 		b.start();
 		
 		=> start() 메소드는 Thread 클래스 안에 내부저으로 만들어져 있으며 start메소드가 run 메소드를 호출하여 작동 시킴
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
	
	 @ 객체배열
	 -> 객체를 생성할 때 new라는 연산자를 사용하여 생성함
	 -> 만약 다수의 객체를 생성해야 할 때 수동으로 하나하나 객체를 만들게 된다면
	 	생성 및 관리적인 측면에서 많이 불편함 (객체마다 레퍼런스를 따로 만들어 주어야 하며 코딩 작성에도 불편함이 생김)
	 -> 그렇기 떄문에 객체 또한 배열로 생성할 수 있는데 그것을 객체 배열이라고 함
 
	 ex) 기존
 
	 Student s1 = new Student();
	 Student s2 = new Student();
	 Student s3 = new Student();
 
 -> 위와 같은 방법으로 다수의 객체를 생성하려면 
 	여러개의 레퍼런스를 만들어 주어야 하고 레퍼런스 마다 이름을 생성 해야 함
 	관리적인 측면에서도 어려움
 
	 ex) 객체 배열 사용
 
	 Student [] stdArr = new Student[3]; // 레퍼런스 배열 생성
	 stdArr[0] = new Student(); /*
	 stdArr[1] = new Student();	    각레퍼런스 마다 배열 생성
	 stdArr[2] = new Student(); */
	 
	 -> 이 떄 주의 할 점
	 	Student [] stdArr = new Student[3]는 실제 객체들에 대한 배열을 만드는 것이
	 	아닌 레퍼런스의 배열을 생성 하는 것이므로 레퍼런스 마다 객체를 별도로 생성 해주어야 함
	 	
	 @ 실습 1
	 -> has a 포함관계로 학생 관리 시스템 만들기
	 
	 @ 실습 2
	 
	 -> has a 포함관계로 Silver 등급을 관리하는 포인트 관리 시스템 만들기
	 		-> 완성 되면 Gold, Vip, VVIP 등급 추가 하기
	 		
	 		
	 코드를 완성하게 되면서 느낀점
	 -> 등급이 추가 될 때 마다 코드의 중복이 발생함
	 -> Controller Class의 코드 수정이 많아 짐
	 
	  --> 상속, 다형성으로 해결가능
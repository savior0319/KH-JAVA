@Scanner Class
 - 사용자로 부터 입력되는 정수, 실수, 문자열, 문자를 처리하는 클래스
 - java.util 패키지 안에 포함

@Scanner 사용
 - Scanner sc = new Scanner(System.in);

@키보드로 입력 받기
 - 정수 값 입력 받기 : sc.nextInt();
 - 실수 값 입력 받기 : sc.nextDouble();  Float();‎‏
 - 문자열 입력 받기 : sc.next(); nextLine(); (next : 띄어쓰기 x, nextLine : 띄어쓰기 o)
 - 문자 입력 받기 : sc.next().charAt(0);
 - nextLine() 사용하기 전 버퍼의 개행 문자를 제거 해야함

@상수
 - 상수에는 리터럴 상수와 심볼릭 상수가 있음

 리터럴 상수
 - 이름이 없는 상수
 - 변수에 대입되는 값 자체를 의미함 
	ex) 3, 3.14, 'a', "hello"

 심볼릭 상수
 - 이름이 있는 상수
 - 변수에 값을 대입 후 해당 변수를 상수화 시킴
 - final 이라는 keyword를 사용하여 심볼릭 상수를 만듦 (*상수의 변수명 -> 대문자)

@ 컴퓨터의 동작 원칙

 - 반드시 같은 데이터 타입 간의 연산을 해야 함
 - 반드시 동일한 데이터 타입의 값을 도일한 데이터 타입 변수에 대입 해야 함
 - 결과 값 또한 동일한 데이터 타입의 값을 가짐

 * 위에 기본 원칙이 지켜지지 않을 경우 프로그래밍 언어에서는 사용자에 
   의해 명시적으로 '형변환'을 해주거나 혹은 암묵적으로 '형변환'을 함

@ 자동 형변환
 - 연산시 컴파일러가 자동으로 형이 변환되는 것을 의미함
 - 작은 데이터형에서 큰 데이터과의 연산은 큰 데이터형으로 자동 형변환 함

 byte -> short -> int -> long -> float -> double
	char

 @ 출력 메소드

1. System.out.println()
	- 자동 줄 개행
2. System.out.print()
	- 자동 줄 개행 x
3. System.out.printf()
	-특정 포맷을 사용하여 출력, 줄 개행 x


 @ 자동 형변환 되는 경우

 1. 작은 것에서 큰 것으로 대입 될 때
	byte b = 100;
	int i = b;

 2. 자료형이 다른 값이 계산 될 때
	int a =3;
	double b = 5.7;
	a+b

 @ 강제 형 변환 - 캐스팅 연산자
 - 자료형을 강제적으로 형 변환하는 연산자
 - 데이터가 큰 것에서 작은것으로 변환하면 손실
 - 사용 방법은 형 변환을 해야 하는 데이터 앞에 () 사용
	ex) (int)3.14; -> 3

 * 포맷 형식 (System.out.printf()를 사용 했을 경우)
 
 정수표현 : %d - 10진수,	 %o - 진수, 	%x  - 16진수
 실수표현 : %f - 실수(소수 점 아래 6자리),	%g - %e와 %f 중 더 짧은 표현으로 사용
 문자 / 문자열 : %c - 문자,	%s - 문자열
 불린형 : %b

 너비 및 정렬

%5d	5칸을 확보하고, 우측 정렬
%-5d	5칸을 확보하고, 좌측 정렬
%.xf	소수점 아래 x자리 까지 표시

 @ 특수 문자 (escape 문자)
	tab	\t
	new line	\n
	\(특수문자) - 특수문자를 출력

@ 산술 연산자 

+ 더하기
-  빼기
*  곱하기
/  나누기
% 나머지

 @ 대입 연산자

 = 	->	오른쪽 값을 왼쪽 공간 (변수)에 대입
 +=, -=, *=, /=, %=	->	왼쪽과 오른쪽 값을 계산한 후 왼쪽에 대입

 @ 증가, 감소, 연산자
 - 값을 하나 증가, 하나 감소 시키는 경우에 사용되는 단항 연산자

 전치(전위) 연산
 - 변수에 저장된 값을 증/감 시킨 후 연산

 후치(후위) 연산
 - 연산 수행 후 변수에 저장된 값을 증/감

a++ (선 연산 / 후 증가) 
++a (선 증가 / 후 연산)
b--  (선 연산 / 후 감소)
--b  (선 감소 / 후 연산)

 @ 관계 연산자 (비교 연산자)
 - 두개의 변수 관계를 따지는 연산자, 다른 말로는 비교 연산자 라고 함
 - 관계 연산자는 조건을 만족하면 true, 만족하지 못 하면 false 값을 반환

	<	>	==	!=	<=	>=

 @ 논리 연산자
 - 여러 조건을 동시에 검사할 때 주로 사용하는 연산자
 - and(그리고), or(또는), not(그러나)를 표현하는 연산자m
	&&	||	!

 @ 비트 연산자
 - 2진수로 변환하여 비트 단위의 연산을 수행하는 연산자
 - 정수형 타입에서만 사용 가능함
 - 주로 하드웨어를 직접 제어하거나 한글 등을 처리 할 때 사용

	&(and)	|(or)	^(xor)	~(not)	<<(왼쪽 쉬프트)	>>(오른쪽 쉬프트)

 &연산자 
 - 두 개의 비트가 1이면 1 하나라도 0이면 0

 |연산자
 - 두 개의 비트중에 하나라도 1이면 1

 ^연산자
 - 두 개의 비트가 다르면 1, 같으면 0
 - 영문자의 대소문자를 변환할 경우에 사용하기도 함


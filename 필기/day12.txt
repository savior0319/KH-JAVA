 
 
 @ 객체지향 프로그래밍이란
 
 -> 현실 세계는 사물이나 어떠한 개념 처럼 독립되고 구분되는 각 각의 객체로 이루어져 있음
 -> 각 각의 독립되는 형태로 구현되어 있는 것이 객체이고 이 개념을 바탕으로 프로그래밍을 하는 것을
 	객체 지향 프로그래밍이라고 함
 		* 객체지향 언어는 객체지향 프로그래밍을 하기 위해 만들어진 언어
 -> 프로그램 객체를 만들기 위해서는 실제 객체에 대한 분석이 필요함
 -> 객체를 표현하는것 것에는 속성(데이터)과 기능(메소드)을 가지고 있음
 
 @ 객체지향 용어
 
 클래스 : 객체를 만들기 위한 설계도 혹은 틀
 	      사물이나 개념의 공통요소(속성, 기능)를 용도에 맞게 추상화 해야 함
 	      
 추상화 : 프로그램에서 필요한 속성과 기능을 추출하고 불필요한 것을 제거 하는 과정
	      프로그래밍적으로 보았을 떄 속성(변수)으로 사용할 것과 기능(메소드)으로 구현할 것들을 설계하는 과정
	  
	  
 @ 객체 지향 프로그래밍을 하기 위한 단계
 
 1. 대상 물색
 2. 추상화
 3. 설계 (클래스 작성)
 4. 사용 (인스턴스화)
 
 @ 객체지향의 3대 원칙
 
 1. 캡슐화 -> 정보은닉
 2. 상속
 3. 다형성
 
 @ 접근제어 지시자
 -> 클래스 안에서 변수 및 메소드 생성 시 접근제어 지시자를 사용 해야 함
 -> 접근제어 키워드는 public, private, default, protected가 있음
 -> 접근제어 지시자는 접근할 때 허용 하는 범위를 말하는 것
 -> 접근제어 지시자를 작성하지 않으면 default로 설정 됨
 
	 public -> 어디서든 접근
	 protected -> 후손 클래스(상속), 같은 패키지 내, 해당 클래스 내부에서 접근 가능
	 default -> 같은 패키지 내 + 해당 클래스 내부에서 접근 가능
	 private -> 해당 클래스에서만 접근 가능
	 
 @ 원칙
 -> 클래스안의 맴버 변수는 private로 설정 하는 것을 원칙으로 함
 	(멤버 변수는 데이터를 저장하고 있는 중요한 공간이기 때문에 보호 해야함)
 -> 클래스 안의 멤버 메소드는 다양 하게 사용 할 수 있음 (기본 public)
 
 @ 정보 은닉
 -> 정보를 숨기는 것을 정보 은닉 이라고 함
 
 ## 정보 은닉의 필요성 ##
 -> 클래스의 멤버 변수는 일반적으로 private 영역에 저장함
 -> 의도치 않은 외부 접근에 대한 오류를 방지 하기 위함
 -> 클래스를 만든 개발자는 해당 클래스의 멤버 변수를 타 사용자가 마음대로 바꾸게 두어서는 안됨(흐름의 문제가 발생할 수 있음)
 
 @ 캡슐화
 -> 하나의 객체는 독립적으로 완벽한 역할을 수행할 수 있어야 함
 -> 정보은닉 + 독립적인 역할을 캡슐화 작업을 하였다 라고 볼 수 있음
  		* 독립적인 역할만 하고 정보은닉이 되지 않은 것은 캡슐화가 되지 못한 것임